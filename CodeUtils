using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CodeUtils : MonoBehaviour
{

    //Ignore this region
    #region ToWorkVariables
    bool HaveShooted;
    #endregion

    //Functions region
    #region Functions

    //Completed
    #region FPSMove
    #region Update
    #region Summary
    /// <summary>
    /// This function must be called in the Update, it sets the datas to work with the "FPSMoveFixedUpdate" function. It needs a float value for the speed 
    /// and a GameObject value to use for the local axis. It returns a Vector3 value that you can use with the "FPSMoveFixedUpdate" function.
    /// You can ctrl + click on this function name to see the code!
    /// </summary>
    /// <param name="Speed"></param>
    /// <param name="DirectionReferenceObject"></param>
    /// <returns>"FinalMove" to use with the "FPSMoveFixedUpdate" function</returns>
    #endregion
    public Vector3 FPSMoveUpdate(float Speed, GameObject DirectionReferenceObject)
    {

        float XMovementAxis = Input.GetAxisRaw("Horizontal");
        float YMovementAxis = Input.GetAxisRaw("Vertical");
        Vector3 XMove = DirectionReferenceObject.transform.right * XMovementAxis;
        Vector3 YMove = DirectionReferenceObject.transform.forward * YMovementAxis;
        Vector3 FinalMove = (XMove + YMove) * Speed * Time.fixedDeltaTime;

        return FinalMove;

    }
    #endregion

    #region FixedUpdate
    #region Summary
    /// <summary>
    /// This function must be called in the FixedUpdate, it performs the datas of the "FPSMoveUpdate" function. It needs a RigidBody value to understand which
    /// object to move and a Vector3 to understand in which direction to move the player, you can get it from the "FPSMoveFixedUpdate" function. It doesn't
    /// return anything.
    /// You can ctrl + click on this function name to see the code!
    /// </summary>
    /// <param name="Speed"></param>
    /// <param name="DirectionReferenceObject"></param>
    /// <returns>Nothing</returns>
    #endregion
    public void FPSMoveFixedUpdate(Rigidbody ObjectToMoveRigidbody, Vector3 FinalMove)
    {


        ObjectToMoveRigidbody.MovePosition(ObjectToMoveRigidbody.position + FinalMove);

    }
    #endregion
    #endregion

    //Completed
    #region CameraRotation
    #region Update
    #region Summary
    /// <summary>
    /// This function must be called in the Update, it sets the datas to work with the "CameraRotationFixedUpdate" function. It doesn't need anything. It returns 
    /// a Vector3 value that you can use with the "CameraRotationFixedUpdate" function
    ///  You can ctrl + click on this function name to see the code!
    /// </summary>
    /// <returns>"MagazinVector" to use with the "CameraRotationFixedUpdate" function</returns>
    #endregion
    public Vector3 CameraRotationUpdate()
    {

        float XRot = Input.GetAxisRaw("Mouse X");
        float YRot = Input.GetAxisRaw("Mouse Y");
        Vector3 YRotation = new Vector3(0f, XRot, 0f);
        Vector3 XRotation = new Vector3(YRot, 0f, 0f);
        Vector3 MagazineVector = new Vector3(XRotation.x, YRotation.y, 0f);
        return MagazineVector;

    }
    #endregion

    #region FixedUpdate
    #region Summary
    /// <summary>
    /// This function must be called in the FixedUpdate, it performs the datas of the "CameraRotationUpdate". It needs 4 bool values to understand
    /// which type of movement you want from it, 2 GameObject values to understand which object to move in which direction, a Vector value that
    /// you can get from the "CameraRotationUpdate" function and a float value for the Sensitivity of the mouse.
    ///  You can ctrl + click on this function name to see the code!
    /// </summary>
    /// <param name="RotateX"></param>
    /// <param name="RotateY"></param>
    /// <param name="RigidbodyRotateX"></param>
    /// <param name="RigidbodyRotateY"></param>
    /// <param name="ObjectToRotateX"></param>
    /// <param name="ObjectToRotateY"></param>
    /// <param name="MagazineVector"></param>
    /// <param name="LookSens"></param>
    /// <returns>Nothing</returns>
    #endregion
    public void CameraRotationFixedUpdate(bool RotateX, bool RotateY, bool RigidbodyRotateX, bool RigidbodyRotateY, GameObject ObjectToRotateX, GameObject ObjectToRotateY, Vector3 MagazineVector, float LookSens)
    {

        if (RotateX)
        {

            if (RigidbodyRotateX)
            {

                Rigidbody objectRigidbody = ObjectToRotateX.GetComponent<Rigidbody>();
                if (objectRigidbody != null)
                {

                    objectRigidbody.MoveRotation(objectRigidbody.rotation * Quaternion.Euler(MagazineVector.x * LookSens * Time.fixedDeltaTime, 0f, 0f));

                }

            }
            else
            {

                ObjectToRotateX.transform.Rotate(-MagazineVector.x * LookSens * Time.fixedDeltaTime, 0f , 0f);

            }

        }
        if (RotateY)
        {

            if (RigidbodyRotateY)
            {

                Rigidbody objectRigidbody = ObjectToRotateY.GetComponent<Rigidbody>();
                if (objectRigidbody != null)
                {

                    objectRigidbody.MoveRotation(objectRigidbody.rotation * Quaternion.Euler(0f, MagazineVector.y * LookSens * Time.fixedDeltaTime, 0f));

                }

            }
            else
            {

                ObjectToRotateY.transform.Rotate(0f, MagazineVector.y * LookSens * Time.fixedDeltaTime, 0f);

            }

        }

    }
    #endregion
    #endregion

    //WORK IN PROGRESS!
    #region GetRaycastShoot
    #region Update
    //Nothing    
    #endregion

    #region FixedUpdate
    #region Summary
    /// <summary>
    /// This function must be called in the FixedUpdate. It needs a GameObject value to understand from where to shoot the raycast, a float value
    /// to understand how far the raycast can go and a LayerMask value to understand which objects it can collide with.
    /// It returns a RayCastHit value that you can use with some other pre-made function that support it.
    /// You can ctrl + click on this function name to see the code!
    /// </summary>
    /// <param name="Speed"></param>
    /// <param name="DirectionReferenceObject"></param>
    /// <returns>"ShootingRay" to use with some other pre-made function that support it.</returns>
    #endregion
    public RaycastHit RaycastShootFixedUpdate(GameObject FirePoint, float Range, LayerMask layerMask)
    {
        RaycastHit ShootingRay;

        
        if (Physics.Raycast(FirePoint.transform.position, FirePoint.transform.forward, out ShootingRay, Range, layerMask))
        {
            


        }

        return ShootingRay;

    }

    #endregion
    #endregion
    #endregion

    //Ignore this region
    #region ToWorkFunctions
    #endregion
}
